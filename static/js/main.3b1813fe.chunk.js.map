{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","opt","type","onClick","Statistics","props","statList","Object","entries","key","value","toUpperCase","slice","Section","title","children","Notification","message","App","handlerOnFeedbackClick","feedback","setState","prevState","countTotalFeedback","state","good","neutral","bad","countPositiveFeedbackPercentage","positiveFeedback","Math","round","this","total","positivePercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUA6BeA,EAzBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAIC,UAAU,kBAAd,SACGF,EAAQG,KAAI,SAAAC,GACX,OACE,oBAAIF,UAAU,wBAAd,SACE,wBACEA,UAAU,0BACVG,KAAK,SACLC,QAAS,kBAAML,EAAgBG,IAHjC,SAKGA,KANsCA,S,OCwBtCG,G,MA7BI,SAAAC,GACjB,IAAMC,EAAWC,OAAOC,QAAQH,GAChC,OACE,oBAAIN,UAAU,aAAd,SACGO,EAASN,KAAI,YAAmB,IAAD,mBAAhBS,EAAgB,KAAXC,EAAW,KAC9B,OACE,qBAAIX,UAAU,mBAAd,UAEKU,EACS,uBAARA,EAAA,oBAEIA,EAAI,GAAGE,cAAgBF,EAAIG,MAAM,GAL3C,KAOKF,IAPiCD,UCQjCI,G,MAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,sBAAKhB,UAAU,UAAf,UACGe,GAAS,6BAAKA,IACdC,OCIQC,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGlB,UAAU,eAAb,SAA6BkB,MC4DvBC,E,kDA1Db,aAAe,IAAD,8BACZ,gBAQFC,uBAAyB,SAAAC,GACvB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGF,EAAWE,EAAUF,GAAY,OAXjC,EAedG,mBAAqB,WAAO,IAAD,EACM,EAAKC,MACpC,OAFyB,EACjBC,KADiB,EACXC,QADW,EACFC,KAhBX,EAoBdC,gCAAkC,WAAO,IAC/BH,EAAS,EAAKD,MAAdC,KACFI,EACJ,EAAKN,qBAAuB,EACvB,IAAM,EAAKA,qBAAwBE,EACpC,EACN,OAAOK,KAAKC,MAAMF,GAAoB,MAxBtC,EAAKL,MAAQ,CACXC,KAAM,EACNC,QAAS,EACTC,IAAK,GALK,E,0CA6Bd,WAAU,IAAD,EACwBK,KAAKR,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,gCACE,cAAC,EAAD,CAASb,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEjB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBkC,KAAKb,2BAI1B,cAAC,EAAD,CAASL,MAAO,aAAhB,SACGW,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAChC,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLM,MAAOD,KAAKT,qBACZW,mBAAoBF,KAAKJ,oCAG3B,cAAC,EAAD,CAAcX,QAAS,+B,GAnDjBkB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3b1813fe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FeedbackOptions.scss';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className=\"FeedbackOptions\">\n      {options.map(opt => {\n        return (\n          <li className=\"FeedbackOptions__item\" key={opt}>\n            <button\n              className=\"FeedbackOptions__button\"\n              type=\"button\"\n              onClick={() => onLeaveFeedback(opt)}\n            >\n              {opt}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Statistics.scss';\n\nconst Statistics = props => {\n  const statList = Object.entries(props);\n  return (\n    <ul className=\"Statistics\">\n      {statList.map(([key, value]) => {\n        return (\n          <li className=\"Statistics__item\" key={key}>\n            {\n              (key =\n                key === 'positivePercentage'\n                  ? `Positive feedback`\n                  : key[0].toUpperCase() + key.slice(1))\n            }\n            : {value}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Section.scss';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className=\"Section\">\n      {title && <h1>{title}</h1>}\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Notification.scss';\n\nconst Notification = ({ message }) => {\n  return <p className=\"Notification\">{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\nimport Section from './Section';\nimport Notification from './Notification';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  handlerOnFeedbackClick = feedback => {\n    this.setState(prevState => {\n      return { [feedback]: prevState[feedback] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const positiveFeedback =\n      this.countTotalFeedback() > 0\n        ? (100 / this.countTotalFeedback()) * good\n        : 0;\n    return Math.round(positiveFeedback) + ' %';\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handlerOnFeedbackClick}\n          />\n        </Section>\n\n        <Section title={'Statistics'}>\n          {good > 0 || neutral > 0 || bad > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message={'No feedback given'} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}